// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	auth "Open_IM/internal/gateway/internal/handler/auth"
	client "Open_IM/internal/gateway/internal/handler/client"
	conversation "Open_IM/internal/gateway/internal/handler/conversation"
	friend "Open_IM/internal/gateway/internal/handler/friend"
	"Open_IM/internal/gateway/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CorsMiddleware, serverCtx.BodyLoggerMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/user_register",
					Handler: auth.RegisterHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user_token",
					Handler: auth.LoginHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/parse_token",
					Handler: auth.ParseTokenHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/force_logout",
					Handler: auth.ForceLogoutHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/auth"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CorsMiddleware, serverCtx.BodyLoggerMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/set_client_config",
					Handler: client.SetClientConfigHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/get_client_config",
					Handler: client.GetClientConfigHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/init"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CorsMiddleware, serverCtx.BodyLoggerMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/get_all_conversations",
					Handler: conversation.GetAllConversationsHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/get_conversation",
					Handler: conversation.GetConversationHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/get_conversations",
					Handler: conversation.GetConversationsHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/set_conversation",
					Handler: conversation.SetConversationHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/batch_set_conversation",
					Handler: conversation.BatchSetConversationsHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/set_recv_msg_opt",
					Handler: conversation.SetRecvMsgOptHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/modify_conversation_field",
					Handler: conversation.ModifyConversationFieldHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/conversation"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CorsMiddleware, serverCtx.BodyLoggerMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/add_friend",
					Handler: friend.AddFriendHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete_friend",
					Handler: friend.DeleteFriendHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/get_friend_apply_list",
					Handler: friend.GetFriendApplyListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/get_self_friend_apply_list",
					Handler: friend.GetSelfFriendApplyListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/get_friend_list",
					Handler: friend.GetFriendListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/add_friend_response",
					Handler: friend.RespondFriendApplyHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/set_friend_remark",
					Handler: friend.SetFriendRemarkHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/add_black",
					Handler: friend.AddFriendBlacklistHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/get_black_list",
					Handler: friend.GetFriendBlacklistHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/remove_black",
					Handler: friend.RemoveFriendBlacklistHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/import_friend",
					Handler: friend.ImportFriendHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/is_friend",
					Handler: friend.CheckFriendHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/friend"),
	)
}
