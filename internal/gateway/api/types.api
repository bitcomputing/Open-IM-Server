syntax = "v1"

type RegisterRequest {
	Secret   string `json:"secret" validate:"required,max=32"`
	Platform int32  `json:"platform" validate:"required,min=1,max=12"`
	ApiUserInfo
	OperationID string `json:"operationID" validate:"required"`
}

type ApiUserInfo {
	UserID      string `json:"userID" validate:"required,min=1,max=64"`
	Nickname    string `json:"nickname,optional" validate:"omitempty,min=1,max=64"`
	FaceURL     string `json:"faceURL,optional" validate:"omitempty,max=1024"`
	Gender      int32  `json:"gender,optional" validate:"omitempty,oneof=0 1 2"`
	PhoneNumber string `json:"phoneNumber,optional" validate:"omitempty,max=32"`
	Birth       uint32 `json:"birth,optional" validate:"omitempty"`
	Email       string `json:"email,optional" validate:"omitempty,max=64"`
	CreateTime  int64  `json:"createTime"`
	LoginLimit  int32  `json:"loginLimit,optional" validate:"omitempty"`
	Ex          string `json:"ex,optional" validate:"omitempty,max=1024"`
	BirthStr    string `json:"birthStr,optional" validate:"omitempty"`
}

type RegisterResponse {
	CommResp
	UserToken UserTokenInfo `json:"data"`
}

type CommResp {
	ErrCode int32  `json:"errCode"`
	ErrMsg  string `json:"errMsg"`
}

type UserTokenInfo {
	UserID      string `json:"userID"`
	Token       string `json:"token"`
	ExpiredTime int64  `json:"expiredTime"`
}

type LoginRequest {
	Secret      string `json:"secret" validate:"required,max=32"`
	Platform    int32  `json:"platform" validate:"required,min=1,max=12"`
	UserID      string `json:"userID" validate:"required,min=1,max=64"`
	LoginIp     string `json:"loginIp"`
	OperationID string `json:"operationID" validate:"required"`
}

type LoginResponse {
	CommResp
	UserToken UserTokenInfo `json:"data"`
}

type ParseTokenRequest {
	OperationID string `json:"operationID" validate:"required"`
}

type ParseTokenResponse {
	CommResp
	Data       map[string]interface{} `json:"data"`
	ExpireTime ExpireTime             `json:"-"`
}

type ExpireTime {
	ExpireTimeSeconds uint32 `json:"expireTimeSeconds"`
}

type ForceLogoutRequest {
	Platform    int32  `json:"platform" validate:"required,min=1,max=12"`
	FromUserID  string `json:"fromUserID" validate:"required,min=1,max=64"`
	OperationID string `json:"operationID" validate:"required"`
}

type ForceLogoutResponse {
	CommResp
}

type SetClientConfigRequest {
	OperationID     string  `json:"operationID"  validate:"required"`
	DiscoverPageURL *string `json:"discoverPageURL"`
}

type SetClientConfigResponse {
	CommResp
}

type GetClientConfigRequest {
	OperationID string `json:"operationID"  validate:"required"`
}

type GetClientConfigResponse {
	CommResp
	Data DiscoverPageURL `json:"data"`
}

type DiscoverPageURL {
	DiscoverPageURL string `json:"discoverPageURL"`
}

type GetAllConversationsRequest {
	OwnerUserID string `json:"ownerUserID" validate:"required"`
	OperationID string `json:"operationID" validate:"required"`
}

type GetAllConversationsResponse {
	CommResp
	Conversations []Conversation `json:"data"`
}

type Conversation {
	OwnerUserID           string `json:"ownerUserID" validate:"required"`
	ConversationID        string `json:"conversationID" validate:"required"`
	ConversationType      int32  `json:"conversationType" validate:"required"`
	UserID                string `json:"userID"`
	GroupID               string `json:"groupID"`
	RecvMsgOpt            int32  `json:"recvMsgOpt,optional"  validate:"omitempty,oneof=0 1 2"`
	UnreadCount           int32  `json:"unreadCount,optional"  validate:"omitempty"`
	DraftTextTime         int64  `json:"draftTextTime"`
	IsPinned              bool   `json:"isPinned,optional" validate:"omitempty"`
	IsPrivateChat         bool   `json:"isPrivateChat"`
	BurnDuration          int32  `json:"burnDuration"`
	GroupAtType           int32  `json:"groupAtType"`
	IsNotInGroup          bool   `json:"isNotInGroup"`
	UpdateUnreadCountTime int64  `json:"updateUnreadCountTime"`
	AttachedInfo          string `json:"attachedInfo"`
	Ex                    string `json:"ex"`
}

type GetConversationRequest {
	ConversationID string `json:"conversationID" validate:"required"`
	OwnerUserID    string `json:"ownerUserID" validate:"required"`
	OperationID    string `json:"operationID" validate:"required"`
}

type GetConversationResponse {
	CommResp
	Conversation Conversation `json:"data"`
}

type GetConversationsRequest {
	ConversationIDs []string `json:"conversationIDs" validate:"required"`
	OwnerUserID     string   `json:"ownerUserID" validate:"required"`
	OperationID     string   `json:"operationID" validate:"required"`
}

type GetConversationsResponse {
	CommResp
	Conversations []Conversation `json:"data"`
}

type SetConversationRequest {
	Conversation
	NotificationType int32  `json:"notificationType"`
	OperationID      string `json:"operationID" validate:"required"`
}

type SetConversationResponse {
	CommResp
}

type BatchSetConversationsRequest {
	Conversations    []Conversation `json:"conversations" validate:"required"`
	NotificationType int32          `json:"notificationType"`
	OwnerUserID      string         `json:"ownerUserID" validate:"required"`
	OperationID      string         `json:"operationID" validate:"required"`
}

type BatchSetConversationsResponse {
	CommResp
	Data SuccessAndFailed `json:"data"`
}

type SuccessAndFailed {
	Success []string `json:"success"`
	Failed  []string `json:"failed"`
}

type SetRecvMsgOptRequest {
	OwnerUserID      string `json:"ownerUserID" validate:"required"`
	ConversationID   string `json:"conversationID"`
	RecvMsgOpt       int32  `json:"recvMsgOpt,optional"  validate:"omitempty,oneof=0 1 2"`
	OperationID      string `json:"operationID" validate:"required"`
	NotificationType int32  `json:"notificationType"`
}

type SetRecvMsgOptResponse {
	CommResp
}

type ModifyConversationFieldRequest {
	Conversation
	FieldType   int32    `json:"fieldType" validate:"required"`
	UserIDList  []string `json:"userIDList" validate:"required"`
	OperationID string   `json:"operationID" validate:"required"`
}

type ModifyConversationFieldResponse {
	CommResp
}

type AddFriendRequest {
	ParamsCommFriend
	ReqMsg string `json:"reqMsg"`
}

type ParamsCommFriend {
	OperationID string `json:"operationID" validate:"required"`
	ToUserID    string `json:"toUserID" validate:"required"`
	FromUserID  string `json:"fromUserID" validate:"required"`
}

type AddFriendResponse {
	CommResp
}

type DeleteFriendRequest {
	ParamsCommFriend
}

type DeleteFriendResponse {
	CommResp
}

type GetFriendApplyListRequest {
	OperationID string `json:"operationID" validate:"required"`
	FromUserID  string `json:"fromUserID" validate:"required"`
}

type GetFriendApplyListResponse {
	CommResp
	Data []map[string]interface{} `json:"data"`
}

type GetSelfFriendApplyListRequest {
	OperationID string `json:"operationID" validate:"required"`
	FromUserID  string `json:"fromUserID" validate:"required"`
}

type GetSelfFriendApplyListResponse {
	CommResp
	Data []map[string]interface{} `json:"data"`
}

type GetFriendListRequest {
	OperationID string `json:"operationID" validate:"required"`
	FromUserID  string `json:"fromUserID" validate:"required"`
}

type GetFriendListResponse {
	CommResp
	Data []map[string]interface{} `json:"data"`
}

type RespondFriendApplyRequest {
	ParamsCommFriend
	Flag      int32  `json:"flag" validate:"required,oneof=-1 0 1"`
	HandleMsg string `json:"handleMsg"`
}

type RespondFriendApplyResponse {
	CommResp
}

type SetFriendRemarkRequest {
	ParamsCommFriend
	Remark string `json:"remark"`
}

type SetFriendRemarkResponse {
	CommResp
}

type AddFriendBlacklistRequest {
	ParamsCommFriend
}

type AddFriendBlacklistResponse {
	CommResp
}

type GetFriendBlacklistRequest {
	OperationID string `json:"operationID" validate:"required"`
	FromUserID  string `json:"fromUserID" validate:"required"`
}

type GetFriendBlacklistResponse {
	CommResp
	Data []map[string]interface{} `json:"data"`
}

type RemoveFriendBlacklistRequest {
	ParamsCommFriend
}

type RemoveFriendBlacklistResponse {
	CommResp
}

type ImportFriendRequest {
	FriendUserIDList []string `json:"friendUserIDList" validate:"required"`
	OperationID      string   `json:"operationID" validate:"required"`
	FromUserID       string   `json:"fromUserID" validate:"required"`
}

type ImportFriendResponse {
	CommResp
	UserIDResultList []UserIDResult `json:"data"`
}

type UserIDResult {
	UserID string `json:"userID"`
	Result int32  `json:"result"`
}

type CheckFriendRequest {
	ParamsCommFriend
}

type CheckFriendResponse {
	CommResp
	Response IsFriend `json:"data"`
}

type IsFriend {
	Friend bool `json:"isFriend"`
}